class  
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
	
转换流的编码表：
	filewriter fw = new FileWriter("a.txt")对于字符串操作使用的默认的码表。 
	通常指的是所在操作系统的码表。简体中文版的操作系统默认就是GBK。

	FileWriter fw = new FileWriter("a.txt");
	OutputStreamWriter osw = new OutoutStreamWriter(new FileOutputStream("a.txt"),"GBK"));
	这两句代码功能一致，第一句的原理就是第二句。

	之所以字符流出现,就是因为对于文本数据,需要进行转码,就需要要将具体的操作的字节根据具体的码表转成对应的字符.
	字符流中最重要的就是转换流,因为该流是字节和字符流之间的桥梁,并可以指定编码表.
	字符流： 字节流+编码表。
	转换流：字节流+指定编码表。
	 FileReader FileWriter 这两个流对象特点在于：字节流+本地默认码表(简体中文版-GBK)
	 InputStreamReader : 字节流+指定编码表。对数据进行解码。
	 		|--FileReader: 字节流+本地默认码表。方便于对默认编码的文本进行操作。
	 OutputStreamWriter: 字节流+指定编码表。对数据进行编码。 
	 		|--FileWriter: 字节流+本地默认码表。方便于对默认编码的文本进行操作。

File
用来操作文件的对象：将文件或者文件夹封装成对象，对文件与文件夹的属性信息的操作
	常用方法：
1，创建：
	boolean createNewFile():创建成功为true，否则为false。如果指定目录下已有该文件，不会创建。
			而输出流创建文件，如果该文件存在，会覆盖。不想覆盖，必须在输出流中构造函数内容加入参数 true 续写.
	创建文件夹:
	boolean mkdir():make directory 在当前目录下创建单级目录。
	boolean mkdirs():在当前目录下创建多级目录。
2，删除：
	boolean delete():删除文件，注意，不走回收站 .所以删除时要慎用.
					如果文件正在被使用，那么delete无法删除，返回false。
	对于文件夹删除，依赖于本地操作系统，windows删除文件夹，必须要保证该文件中的没有任何内容。
	windows删除带内容的文件夹原理：从最里面开始删除，并不断向外删。
	void deleteOnExit():退出程序时，删除指定文件。
3，获取。
	名称：	getName():
	路径：	getPath():获取File对象中封装什么，就获取什么。
			getAbsolutePath():获取绝对路径。这个获取的是该文件或者文件夹所在硬盘的具体路径
	父目录：String  getParent() 获取的也是File对象中封装的路径的父目录，如果没有指定父目录，返回null。
			File getParentFile():newFile("c:\\abc")
	时间：	lastModified():获取修改时间。
	空间：	getFreeSpace():获取该文件所在盘符剩余空间。
			getTotalSpace()：获取该文件所在盘符的总空间。
			long length():获取文件大小。 
4，判断。
	exists():测试此抽象路径名表示的文件或目录是否存在。
	isFile(): 测试此抽象路径名表示的文件是否是一个标准文件。 file必须是存在的
	isDirectory(): 测试此抽象路径名表示的文件是否是一个目录。file必须是存在的
	isAbsolute():测试此抽象路径名是否为绝对路径名
	isHidden():测试此抽象路径名指定的文件是否是一个隐藏文件。
	canRead():测试应用程序是否可以读取此抽象路径名表示的文件。
	canWrite():测试应用程序是否可以修改此抽象路径名表示的文件。
	canExecute(): 测试应用程序是否可以执行此抽象路径名表示的文件。
	
	String[] list():列出指定目录下当前的文件夹和文件的名称包含隐藏文件。
	如果调用List方的file对象，封装的是一个文件，或者是一个不存在文件或者文件夹，返回的是null。
	如果文件夹存在，但没有内容，返回一个数组，但是长度是0.
	如果访问的是一个系统级文件夹，返回的也是null。因为java语言没有这个权限。
	
	File[] listFiles():列出指定目录下当前的文件夹和文件对象包含隐藏文件对象。

递归： 函数自身调用自身，这种情况就称为递归。
	
	注意：
	1.递归的使用一定要定义条件，否则，栈内存溢出。死!
	2,控制递归的次数。过多容易出现栈内存溢出。StackOverflowError
	
	什么时候用递归呢？
	当一个功能被复用，该该功能每次执行时，参数不确定。

练习：获取指定目录下所有的指定扩展名的文件(包含子目录中的).
	将这些文件的绝对路径写入到一个文件中，其实就是建立一个指定扩展名的文件的列表。
	思路；
	1，如何获取目录中所有文件包含子目录中的文件呢?
	需要使用递归完成。
	2，如果在递归中获取指定扩展名的文件中。
	过滤器。 FilenameFilter
	3，因为符合过滤条件的内容有很多，最好是用容器存储起来。
	容器：ArrayList.
	因为存完后，想怎么操作都行，所以写这些文件的绝对路径，仅仅是操作中的一种。
	4，如果想要做写动作，直接遍历容器，将容器中的元素的绝对路径写入到一个文件中即可 
	 FileWriter
	 BufferedWriter
