class  
{
	public static void main(String[] args) 
	{
		System.out.println("Hello World!");
	}
}


字符流的缓冲区：
	在字符流的读写过程中，如果定义了char类型的数组，可以提高读写效率。

	为了便于效率提高和操作，字符流提供了缓冲区对象，将数组进行了封装。
	对外提供了更为方便的方法来操作。

	这两个对象是：
	BufferedReader:
	BufferedWriter:
	作用：它们的出现是给流提高读写效率的。所以，使用缓冲区之前必须先有流对象。

	在这两个缓冲区中，
	BufferedWriter提供了newLine方法。写入一个行分隔符！
	BufferedReader提供了readLine方法。读取一个文本行！

	LineNumberReader：跟踪行号的缓冲字符输入流

装饰设计模式：
	缓冲区的出现其实是使用了一种设计模式来完成。
	缓冲区的好处：是提高了效率，对指定流对象进行了功能的增强或者扩展。
	该种设计模式是：装饰设计模式。
	解决的问题：对已有的对象进行功能的增强和扩展。

	继承和装饰的区别：
	装饰只对功能进行增强，不建立关系，这样要比继承灵活
	但是注意：装饰可以提高读取效率，它的内部需要提供高效的读取方法，这个方法还是使用的流对象中的读取动作。 
	意味着：装饰类提供的也是读取功能。那么它应该也是读取流中aa的一员。
	记住：装饰类和被装饰类因为功能是相同的，只不过装饰类在原有功能上进行增强或扩展。所以装饰类和被装饰类应该所属于一个体系(类或者接口)


字节流：
	InputStream  OutputStream
	对文件操作的流对象。
	FileInputStream
	FileOutputStream

	BufferedInputStream
	BufferedOutputStream

键盘输入：
	系统的标准输入设备：System.in
	系统的标准输出设备：System.out

转换流：
	InputStreamReader
	OutputStreamWriter

流的操作规律：

	对于流的操作无非设备的上数据，
	而数据有数据源和数据汇(数据目的)

	当使用流对象时，对象很多，到底使用哪个呢？
	只要通过几个明确就可以搞定。


	明确1：源和目的。
		源：读取，InputStream  Reader
		目的：写入 OutputStream Writer
		
	明确2：操作的数据是否是纯文本数据。
		源:并且是纯文本  Reader
		目的：并且是纯文本，Writer
		不是纯文本：毫无疑问，必须使用字节流。
		到这里就明确了具体的体系。
	明确3：数据所在设备。
		源设备：
		硬盘文件：File
		键盘：System.in
		内存：数组
		
		目的设备：
		硬盘文件：File
		控制台：System.out
		内存：数组
		其实到了这步就是明确具体体系中的具体流对象.
	明确4：需要加上额外功能吗？比如，提高效率？
		需要：就使用具体的功能对象即可.
		比如需要高效,就使用带Buffer的对象 哦了.