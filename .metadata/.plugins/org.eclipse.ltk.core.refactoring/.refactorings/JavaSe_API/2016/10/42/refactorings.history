<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;cn.java.lang.reflect.IsAssignableFrom.java&apos;" description="Delete element" element1="/src&lt;cn.java.lang.reflect{IsAssignableFrom.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476253695486" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;assignableFrom&apos; from expression &apos;Father.class.isAssignableFrom(Child.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;assignableFrom&apos;&#x0D;&#x0A;- Destination method: &apos;isAssignableFrom.AssignableFromTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Father.class.isAssignableFrom(Child.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;assignableFrom&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;isAssignableFrom{AssignableFromTest.java" name="assignableFrom" replace="true" selection="242 0" stamp="1476254107715" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;methods&apos; from expression &apos;cls.getMethods()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;methods&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;cls.getMethods()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;methods&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="methods" replace="true" selection="177 0" stamp="1476254679782" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;methods2&apos; from expression &apos;methods=cls.getDeclaredMethods()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;methods2&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;methods=cls.getDeclaredMethods()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;methods2&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="methods2" replace="true" selection="407 0" stamp="1476254849912" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;modifiers&apos; from expression &apos;method.getModifiers()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;modifiers&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getModifiers()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;modifiers&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="modifiers" replace="true" selection="911 0" stamp="1476255375531" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;string&apos; from expression &apos;Modifier.toString(modifiers)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;string&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Modifier.toString(modifiers)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;string&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="string" replace="true" selection="996 0" stamp="1476259270904" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;modifiers&apos; from expression &apos;method.getModifiers()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;modifiers&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getModifiers()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;modifiers&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="modifiers" replace="true" selection="1246 0" stamp="1476261429085" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;isPublic&apos; from expression &apos;Modifier.isPublic(modifiers)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;isPublic&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Modifier.isPublic(modifiers)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;isPublic&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="isPublic" replace="true" selection="1296 0" stamp="1476261436383" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;isStatic&apos; from expression &apos;Modifier.isStatic(modifiers)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;isStatic&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ModifierTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Modifier.isStatic(modifiers)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;isStatic&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ModifierTest.java" name="isStatic" replace="true" selection="1349 0" stamp="1476261450734" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;ModifierTest.java&apos; to &apos;JavaSe_API/src/cn.java.lang.reflect&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/cn.java.lang.reflect&apos;&#x0D;&#x0A;- Original element: &apos;cn.java.util.ModifierTest.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;cn.java.lang.reflect" element1="/src&lt;cn.java.util{ModifierTest.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1476261513321" units="1" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;nextInt&apos; from expression &apos;new Random().nextInt(1000)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;nextInt&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.VolatileTest.Counter.add()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Random().nextInt(1000)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;nextInt&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{VolatileTest.java" name="nextInt" replace="true" selection="213 0" stamp="1476323637882" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;counter&apos; from expression &apos;new Counter()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;counter&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.VolatileTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Counter()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;counter&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{VolatileTest.java" name="counter" replace="true" selection="169 0" stamp="1476323666436" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;inner&apos; from expression &apos;currentPostingThreadState.get()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;inner&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.VolatileTest.Counter.operateInner()&apos;&#x0D;&#x0A;- Variable expression: &apos;currentPostingThreadState.get()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;inner&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{VolatileTest.java" name="inner" replace="true" selection="1156 0" stamp="1476324603122" version="1.0"/>&#x0A;<refactoring comment="Rename package &apos;single&apos; to &apos;singleton&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;JavaSe_API/src/single&apos;&#x0D;&#x0A;- Renamed element: &apos;JavaSe_API/src/singleton&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename package &apos;single&apos;" flags="589830" hierarchical="false" id="org.eclipse.jdt.ui.rename.package" input="/src&lt;single" name="singleton" qualified="false" references="true" stamp="1476329007546" textual="false" version="1.0"/>&#x0A;<refactoring comment="Move element &apos;SingleInstance.java&apos; to &apos;JavaSe_API/src/singleton&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/singleton&apos;&#x0D;&#x0A;- Original element: &apos;cn.java.util.SingleInstance.java&apos;&#x0D;&#x0A;- Update references to refactored element" description="Move compilation unit" destination="/src&lt;singleton" element1="/src&lt;cn.java.util{SingleInstance.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.move" patterns="*" policy="org.eclipse.jdt.ui.moveResources" qualified="false" references="true" stamp="1476329013038" units="1" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;defaultBuilder&apos; from expression &apos;new SingleInstanceBuilder()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;defaultBuilder&apos;&#x0D;&#x0A;- Destination method: &apos;singleton.SingleInstance.SingleInstance()&apos;&#x0D;&#x0A;- Variable expression: &apos;new SingleInstanceBuilder()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;defaultBuilder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;singleton{SingleInstance.java" name="defaultBuilder" replace="true" selection="262 0" stamp="1476329859009" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;singleInstanceBuilder&apos; from expression &apos;new SingleInstanceBuilder()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;singleInstanceBuilder&apos;&#x0D;&#x0A;- Destination method: &apos;singleton.SingleInstanceTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new SingleInstanceBuilder()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;singleInstanceBuilder&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;singleton{SingleInstanceTest.java" name="singleInstanceBuilder" replace="true" selection="158 0" stamp="1476330131020" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;singleton.SingleInstanceBuilder.java&apos;" description="Delete element" element1="/src&lt;singleton{SingleInstanceBuilder.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476330207185" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;instance&apos; from expression &apos;new SingleInstance.SingleInstanceBuilder().param1(&quot;配置1&quot;).param1(&quot;配置2&quot;).installDefaultInstance()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;instance&apos;&#x0D;&#x0A;- Destination method: &apos;singleton.SingleInstanceTest.init()&apos;&#x0D;&#x0A;- Variable expression: &apos;new SingleInstance.SingleInstanceBuilder().param1(&quot;配置1&quot;).param1(&quot;配置2&quot;).installDefaultInstance()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;instance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;singleton{SingleInstanceTest.java" name="instance" replace="true" selection="272 0" stamp="1476330319450" version="1.0"/>&#x0A;<refactoring comment="Copy package &apos;isAssignableFrom&apos; to &apos;JavaSe_API/src/cn.java&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/cn.java&apos;&#x0D;&#x0A;- Original element: &apos;JavaSe_API/src/isAssignableFrom&apos;" description="Copy package" destination="/src&lt;cn.java" element1="/src&lt;isAssignableFrom" flags="589830" fragments="1" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyPackages" stamp="1476341609837" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;object&apos; from expression &apos;objectPool.remove(size - 1)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;object&apos;&#x0D;&#x0A;- Destination method: &apos;objectpool.TargetObject.obtain()&apos;&#x0D;&#x0A;- Variable expression: &apos;objectPool.remove(size - 1)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;object&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;objectpool{TargetObject.java" name="object" replace="true" selection="538 0" stamp="1476342035305" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;objectpool.ObjectPool.java&apos;" description="Delete element" element1="/src&lt;objectpool{ObjectPool.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476342394362" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Copy element &apos;TargetObject.java&apos; to &apos;JavaSe_API/src/objectpool&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/objectpool&apos;&#x0D;&#x0A;- Original element: &apos;objectpool.TargetObject.java&apos;" description="Copy compilation unit" destination="/src&lt;objectpool" element1="/src&lt;objectpool{TargetObject.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyResources" stamp="1476342643726" units="1" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;objectpool.ObjectPool.java&apos;" description="Delete element" element1="/src&lt;objectpool{ObjectPool.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476343014950" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;object&apos; from expression &apos;TargetObject.obtain(&quot;参数1&quot;,true)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;object&apos;&#x0D;&#x0A;- Destination method: &apos;objectpool.TargetObject2.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;TargetObject.obtain(&quot;参数1&quot;,true)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;object&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;objectpool{TargetObject2.java" name="object" replace="true" selection="378 0" stamp="1476343836055" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;JavaSe_API/src/isAssignableFrom.copy&apos;" description="Delete element" element1="/src&lt;isAssignableFrom.copy" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476344468423" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;child&apos; from expression &apos;new Child()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;child&apos;&#x0D;&#x0A;- Destination method: &apos;isAssignableFrom.AssignableFromTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Child()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;child&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;isAssignableFrom{AssignableFromTest.java" name="child" replace="true" selection="793 0" stamp="1476344642743" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;father&apos; from expression &apos;new Father()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;father&apos;&#x0D;&#x0A;- Destination method: &apos;isAssignableFrom.AssignableFromTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Father()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;father&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;isAssignableFrom{AssignableFromTest.java" name="father" replace="true" selection="824 0" stamp="1476344649040" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;list1&apos; from expression &apos;new ArrayList&lt;String&gt;()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;list1&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ListTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new ArrayList&lt;String&gt;()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;list1&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ListTest.java" name="list1" replace="true" selection="178 0" stamp="1476426238610" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;retainAll&apos; from expression &apos;list1.retainAll(list2)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;retainAll&apos;&#x0D;&#x0A;- Destination method: &apos;cn.java.util.ListTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;list1.retainAll(list2)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;retainAll&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;cn.java.util{ListTest.java" name="retainAll" replace="true" selection="426 0" stamp="1476426315964" version="1.0"/>&#x0A;<refactoring comment="Copy element &apos;MetaAnnotation.java&apos; to &apos;JavaSe_API/src/annotation&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/annotation&apos;&#x0D;&#x0A;- Original element: &apos;annotation.MetaAnnotation.java&apos;" description="Copy compilation unit" destination="/src&lt;annotation" element1="/src&lt;annotation{MetaAnnotation.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyResources" stamp="1476539549290" units="1" version="1.0"/>&#x0A;<refactoring accessors="true" comment="Delete element from project &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Original element: &apos;annotation.MetaAnnotation2.java&apos;" description="Delete element" element1="/src&lt;annotation{MetaAnnotation2.java" elements="1" flags="589830" id="org.eclipse.jdt.ui.delete" resources="0" stamp="1476539568978" subPackages="false" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;method&apos; from expression &apos;cls.getMethod(&quot;annoTest&quot;)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;method&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;cls.getMethod(&quot;annoTest&quot;)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;method&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="method" replace="true" selection="233 0" stamp="1476539701027" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;annotationPresent&apos; from expression &apos;method.isAnnotationPresent(MyAnnotation.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;annotationPresent&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.isAnnotationPresent(MyAnnotation.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;annotationPresent&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="annotationPresent" replace="true" selection="336 0" stamp="1476539722090" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;annotation&apos; from expression &apos;method.getAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;annotation&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;annotation&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="annotation" replace="true" selection="436 0" stamp="1476539783684" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;annotations&apos; from expression &apos;method.getAnnotations()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;annotations&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getAnnotations()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;annotations&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="annotations" replace="true" selection="531 0" stamp="1476539820082" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;annotationType&apos; from expression &apos;annotation.annotationType()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;annotationType&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;annotation.annotationType()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;annotationType&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="annotationType" replace="true" selection="711 0" stamp="1476539975906" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;annotationsByType&apos; from expression &apos;method.getAnnotationsByType(MyAnnotation.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;annotationsByType&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getAnnotationsByType(MyAnnotation.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;annotationsByType&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="annotationsByType" replace="true" selection="869 0" stamp="1476540122565" version="1.0"/>&#x0A;<refactoring comment="Copy element &apos;MyAnnotation.java&apos; to &apos;JavaSe_API/src/annotation&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Destination element: &apos;JavaSe_API/src/annotation&apos;&#x0D;&#x0A;- Original element: &apos;annotation.MyAnnotation.java&apos;" description="Copy compilation unit" destination="/src&lt;annotation" element1="/src&lt;annotation{MyAnnotation.java" files="0" flags="589830" folders="0" id="org.eclipse.jdt.ui.copy" policy="org.eclipse.jdt.ui.copyResources" stamp="1476540607070" units="1" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredAnnotations&apos; from expression &apos;method.getDeclaredAnnotations()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;declaredAnnotations&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.test()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.getDeclaredAnnotations()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredAnnotations&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="declaredAnnotations" replace="true" selection="986 0" stamp="1476540760109" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredAnnotation&apos; from expression &apos;cls.getDeclaredAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;declaredAnnotation&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.test()&apos;&#x0D;&#x0A;- Variable expression: &apos;cls.getDeclaredAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredAnnotation&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="declaredAnnotation" replace="true" selection="1296 0" stamp="1476541135397" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;cls&apos; from expression &apos;Child.class.getMethod(&quot;method&quot;)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;cls&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Child.class.getMethod(&quot;method&quot;)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;cls&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="cls" replace="true" selection="331 0" stamp="1476542899281" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;declaredAnnotation&apos; from expression &apos;Child.class.getDeclaredAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;declaredAnnotation&apos;&#x0D;&#x0A;- Destination method: &apos;annotation.AnnotationTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;Child.class.getDeclaredAnnotation(MyAnnotation.class)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;declaredAnnotation&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;annotation{AnnotationTest.java" name="declaredAnnotation" replace="true" selection="424 0" stamp="1476545128501" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;test&apos; from expression &apos;new Test()&apos;&#x0D;&#x0A;- Original project: &apos;JavaSe_API&apos;&#x0D;&#x0A;- Variable name: &apos;test&apos;&#x0D;&#x0A;- Destination method: &apos;singleton.SingleInstanceTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Test()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;test&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;singleton{SingleInstanceTest.java" name="test" replace="true" selection="427 10" stamp="1476550126994" version="1.0"/>
</session>