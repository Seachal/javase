<?xml version="1.0" encoding="UTF-8"?>
<session version="1.0">&#x0A;<refactoring comment="Extract local variable &apos;javaTest&apos; from expression &apos;new JavaTest()&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;javaTest&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new JavaTest()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;javaTest&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="javaTest" replace="true" selection="255 0" stamp="1426336248906" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;value&apos; from expression &apos;method.invoke(target,args)&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;value&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.test().new InvocationHandler() {...}.invoke()&apos;&#x0D;&#x0A;- Variable expression: &apos;method.invoke(target,args)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;value&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="value" replace="true" selection="684 0" stamp="1426336279997" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;target&apos; from expression &apos;new Target()&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;target&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new Target()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;target&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="target" replace="true" selection="292 0" stamp="1426336292703" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;adviceImpl&apos; from expression &apos;new AdviceImpl()&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;adviceImpl&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;new AdviceImpl()&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;adviceImpl&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="adviceImpl" replace="true" selection="329 0" stamp="1426336302281" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;proxy&apos; from expression &apos;javaTest.getProxy(target,adviceImpl)&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;proxy&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;javaTest.getProxy(target,adviceImpl)&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;proxy&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="proxy" replace="true" selection="390 0" stamp="1426336389393" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;newProxyInstance&apos; from expression &apos;Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),new InvocationHandler(){@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {advice.beforMethod(method);Object value=method.invoke(target,args);advice.afterMethod(method);return value;}})&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;newProxyInstance&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.getProxy()&apos;&#x0D;&#x0A;- Variable expression: &apos;Proxy.newProxyInstance(target.getClass().getClassLoader(),target.getClass().getInterfaces(),new InvocationHandler(){@Override public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {advice.beforMethod(method);Object value=method.invoke(target,args);advice.afterMethod(method);return value;}})&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;newProxyInstance&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="newProxyInstance" replace="true" selection="866 0" stamp="1426336494561" version="1.0"/>&#x0A;<refactoring comment="Extract local variable &apos;proxy&apos; from expression &apos;javaTest.getProxy(new TargetImpl(),new AdviceImpl())&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Variable name: &apos;proxy&apos;&#x0D;&#x0A;- Destination method: &apos;com.terry.test.JavaTest.main()&apos;&#x0D;&#x0A;- Variable expression: &apos;javaTest.getProxy(new TargetImpl(),new AdviceImpl())&apos;&#x0D;&#x0A;- Replace occurrences of expression with variable" description="Extract local variable &apos;proxy&apos;" final="false" id="org.eclipse.jdt.ui.extract.temp" input="/src&lt;com.terry.test{JavaTest.java" name="proxy" replace="true" selection="333 0" stamp="1426336765458" version="1.0"/>&#x0A;<refactoring comment="Rename type &apos;com.terry.test.JavaTest&apos; to &apos;DynamicProxyTest&apos;&#x0D;&#x0A;- Original project: &apos;Test&apos;&#x0D;&#x0A;- Original element: &apos;com.terry.test.JavaTest&apos;&#x0D;&#x0A;- Renamed element: &apos;com.terry.test.DynamicProxyTest&apos;&#x0D;&#x0A;- Update references to refactored element&#x0D;&#x0A;- Update textual occurrences in comments and strings" description="Rename type &apos;JavaTest&apos;" flags="589830" id="org.eclipse.jdt.ui.rename.type" input="/src&lt;com.terry.test{JavaTest.java[JavaTest" matchStrategy="1" name="DynamicProxyTest" qualified="false" references="true" similarDeclarations="false" stamp="1426342507382" textual="false" version="1.0"/>
</session>