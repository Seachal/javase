package com.cn.text;

/*******************************************************************************
 *        程序名称   ：  
 *        处 理          ：   
 *        功 能          ：  
 *        版 本          ：    V1.0  
 *
 *        修改履历
 *        年  月  日 区分                所 属/担 当                              对应编号                          状态
 *        ---------- ---- ------------------ ------------------------- --------
 *       2016年10月19日    金控数据/张文华     v1.0        new
 *  
 *
 *        Copyright ( C ) 2016 by Chengdu Financial Holding  &amp; Data Services, Co, Ltd.
 *        All rights reserved.
 *
 ********************************************************************************/

public class Random {

	public static void main(String[] args) {
		
		for (int i = 0; i < 5; i++) {
			try {
				Random r = new Random(100);
				System.out.println(r.next());
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
		
		for (int i = 0; i < 5; i++) {
			try {
				java.util.Random r2 = new java.util.Random();
				System.out.println(r2.nextInt(100));
			} catch (Exception e) {
				e.printStackTrace();
			}
		}
	}

	private int r=0 ;//随机对象范围
	private RandomRunnable rr1 ;
	private RandomRunnable rr2 ;
    private boolean isCall =false ;
    private boolean isCall2 =false ;
	public Random (int r){
		this.r=r;
		rr1= new RandomRunnable(new Call() {
			
			@Override
			void call() {
				isCall=true;
			}
		});
		rr2= new RandomRunnable(new Call() {
			
			@Override
			void call() {
				isCall2=true;
			}
		});

	}


	public int  next() throws Exception{
		isCall =false ;
	    isCall2 =false ;
		new Thread(rr1).start();
		new Thread(rr2).start();
		
		boolean flag=!isCall || !isCall2;
		while(flag){
			flag=!isCall || !isCall2;
		}
		long c = System.nanoTime();
		int t = (int) (c%2 +1);
		Thread.sleep(1l);
		rr1.end();
		rr2.end();
		int j =0;

		switch (t) {
		case 1:
			j=rr1.getNumber();
			break;
		case 2:
			j=rr2.getNumber();
			break;
		}

		return  j%(r+1);
	}


}
class RandomRunnable implements Runnable{
	private int j ; 
	private boolean end =false;
	
	private Call call;
	
	public RandomRunnable(Call call){
		this.call = call;
	}
	
	

	@Override
	public void run() {
		System.out.println("开始");
		
	    call.call();
		j=0;
		end =true;
		while (end) {
			j++;
		}
		System.out.println("结束"+j);
	}


	public int getNumber(){
		return this.j;
	}

	public void end(){
		this.end=false;
	}

}

abstract class Call{
	//运行线程了告诉主线程
	abstract void call();
}
