                    
                                                                           中介者模式
 类型：行为型
 定义：用一个中介者对象来封装一系列的对象交互,中介者使得各对象不需要显示地相互引用,从而使其耦合松散，而且可以独立地改变它们之间
          的交互
 场景问题：
   电脑里面的各个配件之间的交互,主要是通过主板来完成的,如果没有了主板,那么各个配件之间就必须自行相互交互，以互相传送数据。
   若把每个电脑配件抽象成为一个类或者是子系统,那就相当于出现了多个类之间相互交互,而且交互很繁琐,导致每个类都必须知道所需要
  交互的类,也就是我们常说的类和类耦合了。更要命的是,每个类在发生改变的时候,需要通知所有相关的类一起修改，因为接口或者是
  功能发生了变动,使用它的地方都得变。      
  
 中介者模式解决问题的思路：
 中介者模式通过引入一个中介者对象，让其他对象只和中介者对象交互，而中介者对象知道如何和其他所有的对象交互,这样对象之间的交互关系就
 没有了，对于中介者对象而言,所有相互交互的对象,被视为同事类，中介者对象就是用来维护各个同事之间的关系，而所有的同事只和中介者对象交互。
 每个同事对象，当自己发生变化的时候，不需要知道这会引起其他对象什么变化，它只需要通知中介者对象就可以了(比如通过Mediator的changed方法)，
 然后由中介者对象去与其他对象交互。
    有了中介者以后，所有的交互都封装到中介者对象里面，各个对象不再需要维护这些关系了，扩展关系的时候也只需要扩展和修改中介者对象就
 可以了。
 
 结构：
 Mediator：中介者接口，定义和各个同事之间交互需要的方法，可以是公共的通信方法,比如changed方法，大家都用，也可以是小范围的交互方法
 ConcreteMediator:具体中介者实现对象，它需要了解并维护各个同事对象，并负责具体的协调各同事对象的交互关系。
 Colleague：同事类的定义，通常实现成为抽象类。主要负责约束同事对象的类型，并实现一些具体同事类之间的公共功能，比如,每个具体同事类
 都应该知道中介者对象，也就是具体同事类都会持有中介者对象，都可以定义到这个类里面。
 ConcreteColleague:具体同事类，实现自己的业务，在需要与其他同事通信的时候，就与持有的中介者通信，中介者会负责与其他的同事交互。
 
 标准实现：
 //同事类的定义 ，持有一个中介者对象
 public abstaract class Colleague{
    public Mediator mediator;
    public Colleague(Mediator mediator){
       this.mediator=mediator;
    }
   public Mediator getMediator(){
      return this.mediator;
   }
 }
  //具体的同事类A
 public ConcreteColleagueA extends Colleague{
   public ConcreteColleagueA(Mediator mediator){
     super(mediator);
   }
    //示意方法  执行某些业务功能
   public void operation(){
     //在需要跟其他同事通信的时候，通知中介者对象
     getMediator().changed(this);
   }
 }
 //具体的同事类B
 public ConcreteColleagueB extends Colleague{
   public ConcreteColleagueB(Mediator mediator){
     super(mediator);
   }
   //示意方法  执行某些业务功能
   public void operation(){
     //在需要跟其他同事通信的时候，通知中介者对象
     getMediator().changed(this);
   }
 }
 
 //中介者接口  定义与各个同事对象通信的接口
 public interface Mediator{
  /**
  *同事对象在自身改变的时候来通知中介者的方法 让中介者去负责相应的与其他同事对象的交互
  *@param  colleague 同事对象自身，好让中介者对象通过对象实例去获取同事对象的状态
  /
   public void changed(Colleague colleague);
 }
 
 //具体的中介者实现
 public　class ConcreteMediator implements Mediator{
    private  ConcreteColleagueA colleagueA;//持有并维护同事A
    private  ConcreteColleagueB colleagueB;//持有并维护同事B
    
    public void setColleagueA(ConcreteColleagueA colleagueA){
        this.colleagueA=colleagueA;
    }
    public void setColleagueB(ConcreteColleagueB colleagueB){
        this.colleagueB=colleagueB;
    }
    
   @override
   public void changed(Colleague colleague){
      //某个同事类发生了变化，通常需要与其他同事交互
      //具体协调相应的同事对象来实现协作行为
      if(colleague==colleagueA){
      
      }else if(colleague==colleagueB){
      
      }
   }
 }   

认识中介者模式：
1.中介者模式的功能
 封装对象之间的交互，如果一个对象的操作会引起其他相关对象的变化,或者是某个操作需要引起其他对象的后续或连带操作，而这个对象又不希望自己来处理
 这些关系，那么就可以找中间者。使用中介者还有一个好处就是,集中地控制这些对象之间的交互关系，这样当有变化的时候，修改起来就很方便。
2.需要Mediator接口吗
  首先 ，接口是用来"封装隔离"的，那么封装谁，隔离谁呢？Mediator接口就是用来封装中介者对象的，使得使用中介者对象的客户对象跟具体的中介者实现对象
  分离开。有没有使用Mediator接口的必要,那就取决于是否会提供多个不同的中介者实现。如果中介者实现不止一个，或者预计中有扩展的需求，那么就需要定义
  Mediator接口，让各个同事对象来面向中介者接口编程，而无须关心具体的中介者实现。
3.如何实现同事和中介者的通信
一种实现方式是在Mediator接口中定义一个特殊的通知接口，作为一个通用的方法，让各个同事类来调用这个方法，比如changed()
另外一种实现方式是采用观察者模式,把Meiator实现成为观察者，而各个同事类实现成为被观察者，这样当同事类发生改变，就会通知Mediator，Mediator在接到
通知以后，会与相应的同事对象进行交互。

广义中介者：
1.通常会去掉同事对象的父类,这样可以让任意的对象,只要需要相互交互,就可以成为同事，因为java单继承的限制，为了使用中介者模式，就让这些同事去继承
一个父类，这样是很不好的。而且在实际开发中，很多相互交互的对象本身是没有公共父类的，强行加上一个父类，会让这些对象实现起来特别别扭。
2.通常不定义Mediator接口，把具体的中介者对象实现成为单例。因为中介者对象是用来封装和处理同事对象之间关系的，它一般是没有状态需要维护的，因此
中介者通常可以实现成单例。
3.同事对象不再持有中介者，而是在需要的时候直接获取中介者对象并调用：中介者对象也不再持有同事对象，而是在具体处理方法里面去创建，或者获取，或者从
参数传入需要的同事对象。

中介者模式的本质：封装交互
何时选用中介者模式?
 1.如果一组对象之间的通信方式比较复杂，导致相互依赖，结构混乱，可以采用中介者模式
 2.如果一个对象引用很多的对象，并直接跟这些对象交互，导致难以复用该对象，可以采用中介者模式。
    
 中介者模式和外观模式的区别：
   外观模式是为了简化客户端调用，避免客户端和各个子系统之间交互，提供一个外观类,在外观类中实现客户端需要的功能，而客户端只需要调用外观类中一个
   简单的方法即可实现和多个子系统交互的功能。而且客户端不用关心具体实现，外观类作为多个子系统对外提供功能的代表。
  中介者模式则是封装多个同事类之间的相互交互,从封装关系上就和外观模式不一样了，而且主要目的是为了使得原本各个相互依赖的对象之间松耦合。




    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    