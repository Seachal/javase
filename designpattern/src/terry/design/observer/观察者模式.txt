       
                                             观察者模式
类型：行为型
定义：定义对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都得到通知并被自动更新。
场景引出问题：当一个对象的状态发生改变的时候，如何让依赖于它的所有对象得到通知，并进行相应的处理呢？
被观察者(Observerable)和观察者(observer)是一对多的关系，在被观察者中注册观察者，当被观察者状态发生改变时通知所有注册过的观察者
标准实现：
//被观察者
public class Observerable{
   public List<Observer> observerList=new ArrayList<Observer>();//持有所有观察者集合
   
   //添加观察者
   public void addObserver(Observer observer){
   observerList.add(observer);
   }
   //移除观察者
   public void removeObserver(Observer observer){
      observerList.remove(observer);
   }
   //移除所有的观察者
   public void removeAllObserver(){
      oberverList.removeAll();
   }
   //返回观察者数目
   public int getCount(){
     return observerList.size();
   }
   //通知观察者
   public　synchronized void  notifyObserver(String content){
      for(Observer observer:observerList){
           observer.update(this);//拉模型：将当前对象返回给观察者,以便观察者获取被观察者中的信息，
           observer.update(content);//推模型：目标对象主动向观察者推送目标的详细信息
           observer.update(this,content);//拉模型和推模型的结合,如果content信息不够,观察者可主动到目标对象中获取
        }
   }
}
//具体的被观察者
public class ObserverSubject extends Observerable{
   private String content;//封装的数据
   
   //具体的业务，触发动作
  public void setContent(String content){
     this.content=content;
     notifyObserver();
  } 
  //供观察者获取数据
  public String getContent(){
     return this.content;
  }
}


//观察者接口
public interface Observer{
    public void update(Observerable observerable);//拉模型
    public void update(String content);//推模型
    public void update(Observerable,Object obj)//拉模型和推模型的结合
}
//具体的观察者实现类
public class ConcreteObserver implements Observer{
      //1.拉模型，由观察者主动到目标对象中获取
    public  void update(Observerable observerable){
        ObserverSubject subject=(ObserverSubject)observerable;
        String content=sunject.getContent();//
    }
     //2.推模型 目标对象主动向观察者推送目标对象的详细信息。
     public void update(String content){
        
     }
     //3.拉模型和推模型的结合
     public void update(Observerable observerable,Object object){
        
     }
     
}

观察者模式的本质：触发联动

注意：在被观察者中通知观察者并不一定要通知全部注册过的观察者,可根据业务需要选择性的通知观察者。这时候就要将Observerable中的通知方法notifyObserver
实现成为抽象方法,而在具体的被观察者中实现该方法,然后根据需要的选择性的通知观察者。参照具体实例








































