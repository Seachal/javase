             
                                           策略模式
类型：行为型
定义：定义一系列的算法，把它们一个个封装起来，并且使它们相互替换，本模式使得算法可独立于使用它的客户而变化。
场景问题：一个报价管理系统，要实现对不同的人员报不同价格的功能，比如：
      1.对普通客户或者新客户报全价
      2.对老客户报的价格，统一折扣5%
      3.对大客户报的价格，统一折扣10%
分析：要实现对不同的人员报不同价格的功能，无外乎就是判断起来麻烦点，
//价格管理，主要完成计算向客户报价的功能
public class Price{
   //报价，对不同的客户类型，计算不同的价格
   public double quote(double goodsPrice,String custommerType){
    if("普通客户".equals(custommerType)){
       return this.calPriceForNormal(goodsPrice);
    }else if("老客户".equals(custommerType)){
       return this.calPriceForOld(goodsPrice);
    }else if("大客户".equals(custommerType)){
       return this.calPriceForLarge(goodsPrice);
    }
   }
   
   //计算对普通客户或新客户应报的价格
   private double calPriceForNormal(double goodsPrice){
     System.out.println("对普通客户或新客户，没有折扣");
   }
   //对老客户计算应报的价格
   private double calPriceForOld(double goodsPrice){
     System.out.println("对于老客户,统一折扣5%");
      return goodsPrice*(1-0.05)
   }
   //计算为大客户应报的价格
  private double calPriceForLarge(double goodsPrice){
    System.out.println("对于大客户,统一折扣10%");
      return goodsPrice*(1-0.1)
   }
}
以后某个算法发生了变化，直接修改相应的私有方法就可以了，扩展起来也容易，只需要在类里面新增加一个私有的方法来计算新的价格，
然后计算报价的方法中新添一个else-if即可。
问题所在：
1.假如有100个或者更多这样的计算方式，会使这个价格类非常庞大，难以维护。而且，扩展和维护都需要去修改已有的代码，
这是很不好的，违反了开-闭原则。(对扩展开放，对修改关闭)。
2.经常会有这样的需要，在不同的时候，要使用不同的计算方式。
      比如，在公司周年庆的时候，所有的客户额外增加3%的折扣，在换季促销的时候，普通客户是额外增加折扣2%，老客户是增加折扣3%,
      大客户是增加折扣5%，这意味着计算报价的方式会经常修改，或者被切换。通常情况下是被切换，因为过了促销时间，又还回到正常
      的价格体系上来了。而现在的价格类中计算报价的方法，是固定调用各种计算方式，这使得切换调用不同的计算方式很麻烦，每次都需要修改
    if-else中的调用代码。

应用策略模式来解决问题：
 分析上面的问题，各种计算报价的计算方式就好比是具体的算法，而使用这些计算方式报价的程序，就相当于是使用算法的客户，
 所以上面的问题在于算法和使用算法的客户是耦合的，甚至是密不可分的，具体的算法和使用算法的客户是同一个类中的不同方法。
 
 按照策略模式,应该先把所有的计算方式独立出来，每个计算方式做成一个单独的算法类，从而形成一系列的算法，并且为这一系列
 的算法定义一个公共的接口，这些算法实现是同一个接口的不同实现，地位是平等的，可以相互替换。这样一来，要扩展新的算法就
 变成了增加一个新的算法实现类。要维护某个算法，也只是修改某个具体的算法实现即可。不会对其他代码造成影响。
 
 标准实现：
 Strategy：策略接口，用来约束一系列具体的策略算法，Context使用这个接口来调用具体的策略实现定义的算法。
 ConcreteStrategy：具体的策略实现,也就是具体的算法实现。
 Context：上下文,负责和具体的策略类交互，通常上下文会持有一个真正的策略实现,上下文还可以让具体的策略类来获取上下文的数据，
                甚至让具体的策略类来回调上下文的方法。
//策略，定义算法的接口
public interface Strategy{
  //某个算法的接口,可以有传入参数，也可以有返回值
  public void  algorithm();
}
//实现具体的算法A
public class ConcreteStrategyA implements Strategy{
  @override
   public void algorithm(){
      //具体的算法实现
    }
}
//实现具体的算法B
public class ConcreteStrategyB implements Strategy{
  @override
   public void algorithm(){
      //具体的算法实现
    }
}
//上下文对象,通常会持有一个具体的策略对象
public class Context{
  private Strategy strategy;//持有一个具体的策略对象
  public Context(Strategy strategy){
      this.strategy=strategy;
   }
  //上下文对客户端提供的操作接口,可以有参数和返回值
  public void operate(){
     strategy.algorithm();//通常会转调具体的策略对象进行算法运算
   }
}

认识策略模式：
1.策略模式的功能
把具体的算法实现从具体的业务处理中独立出来,把它们实现成为单独的算法类，从而形成一系列的算法，并让这些算法可以相互替换
2.策略模式和if-else语句
每个策略算法具体实现的功能，就是原来在if-else结构中的具体实现，因此多个if-else语句可以考虑使用策略模式
3.算法的平等性
策略模式一个很大的特点就是各个策略算法的平等性，对于一系列具体的策略算法，大家的地位是完全一样的，正是因为这个平等性，才
能实现算法之间可以相互切换。
   策略算法是相同行为的不同实现
4.谁来选择具体的策略算法
一个是在客户端，当使用上下文的时候，由客户端来选择具体的策略算法，然后把这个策略算法设置给上下文，还有一个是客户端不管，
由上下文来选择具体的策略算法。
5.运行时策略的唯一性
运行期间,只能使用一个策略实现。
7.增加新的策略
实现策略接口，完成实现即可，而客户端需要该策略时，也只需创建一个新的策略类，然后设置给Context即可，除了客户端发生变化外，
已有的上下文，策略接口定义和策略的已有实现，都不需要做任何修改，可见能很方便地扩展新的策略算法。

Strategy和Context的关系
在策略模式中，通常是上下文使用具体的策略实现对象。反过来,策略实现对象也可以从上下文获取所需要的数据，因此可以将上下文当做参数
传递给策略实现对象，这种情况下上下文和策略实现对象是紧密耦合的。这种情况下，上下文封装着具体策略对象进行算法运算所需要的数据，
具体策略对象通过回调上下文的方法来获取这些数据。
注意：由于所有的策略实现对象都实现同一个策略接口，传入同一个上下文，可能会造成传入的上下文数据的浪费，因为有的算法会使用这些数据，
而有的算法不会使用，但是上下文和策略对象之间交互的开销是存在的。

考虑这样一个功能，工资支付方式的问题，很多企业的工资支付方式是很灵活的，比如，人民币现金支付，美元现金支付，银行转账到工资账户，
银行转账到工资卡。而且随着公司的发展，会不断有新的工资支付方式出现，要实现这样的功能，策略模式是一个很好的选择。在实现这个功能
的时候，不同的策略算法需要的数据是不一样，比如，现金支付就不需要银行账号，而银行转账就需要账号，这就导致在设计策略模式接口中的方
法时，不太好确定参数的个数，而且，今后的扩展还得修改策略接口。加入一个策略，就需要修改接口，然后修改所有已有的实现，这是很麻烦的。
解决方案一：就是把上下文当做参数传递给策略对象。如果要扩展新的策略实现，只需要扩展上下文就可以了，已有的实现不需要做任何的修改。

//定义工资支付的策略接口，公司有多种支付工资的算法，比如现金，银行卡，现金加股票，现金加期权，美元支付。
public  interface PaymentStrategy{
 public void pay(PaymentContext ctx);
}
//人民币现金支付
public class RMBCash implements PaymentStrategy{
  public void pay(PaymentContext ctx){
  System.out.println("现在给"+ctx.getUsername+"人民币现金支付"+ctx.getMoney+"元");
  }
}
//美元现金支付
public class DollarCash implements PaymentStrategy{
  public void pay(PaymentContext ctx){
  System.out.println("现在给"+ctx.getUsername+"美元现金支付"+ctx.getMoney+"元");
  }
}
//支付工资的上下文，每个人的工资不同，支付方式也不同
public class PaymentContext{
  private String username=null;
  private double money=0.0;
  private PaymentStrategy strategy=null;//持有具体策略对象
  public PaymentContext(String username,double money,PaymentStrategy strategy){
   this.username=username;
   this.money=money;
   this.strategy=strategy;
  }
  public String getUsername(){
    return this.username;
  }
  public double getMoney(){
    return this.money;
  }
  //立即支付工资
  public void payNow(){
    this.strategy.pay(this)//转调具体策略的支付方法，然后把上下文当做参数传递给策略对象，策略对象即可取得上下文中的数据
  }
}

//客户端使用上下文来使用具体的策略
public class Client{
 public void operate(){
   //创建想要的支付策略
   PaymentStrategy strategyRMB=new RMBCash();
   PaymentStrategy strategyDollar=new DollarCash();
   
   //准备小李的支付工资上下文
   PaymentContext ctx=new PaymentContext("小李",1000,strategyRMB);
     ctx.payNow();//向小李支付工资
    
    //切换一个人，给小王支付工资
   PaymentContext ctx=new PaymentContext("小王",1000,strategyRMB);
      ctx.payNow();
 }
}

//增加一种支付到银行卡的策略实现，然后通过继承来扩展支付上下文，在其中添加新的支付方式需要的新数据。比如银行卡账户
并在客户端使用新的上下文和新的策略实现就可以了，这样已有的实现都不需要改变，完全遵循开-闭原则。
//扩展支付上下文对象
public class PaymentContext2 extends PaymentContext{
  private String account=null;//银行账号
  public PaymentContext2(String username,String money,String account,PaymentStrategy strategy){
    super(username,money,strategy);
    this.account=account; //传入账号参数
   }
   public String getAccount(){
    return account;
   }
}
//支付到银行卡,新的策略算法的实现
public class Card implements PaymentStrategy{
  public void pay(PaymentContext ctx){
      PaymentContext2 ctx2=(PaymentContext2)ctx;
      System.out.println("现在给"+ctx2.getUsername()+"的"+ctx2.getAccount()+"账号支付了"+ctx2.getMoney()+"元");
      //连接银行，进行转账
  }
}

解决方案二：给具体的策略类注入所需要的数据
public class Card implements PaymentStrategy{
   private String account;//银行账号
   public Card(String account){
     this.account=account;
   }
  public void pay(PaymentContext ctx){
      System.out.println("现在给"+ctx.getUsername()+"的"+this.getAccount()+"账号支付了"+ctx.getMoney()+"元");
      //连接银行，进行转账
  }
}
两种解决方案比较：
1.对于扩展上下文的方式：这样实现，所有策略的实现风格更统一，策略需要的数据都统一从上下文来获取，这样在使用方法上也很统一
，另外，在上下文中添加新的数据，别的相应算法也可以用得上，可以视为公共的数据，但缺点也很明显，如果这些数据只有一个特定
的算法来使用，那么这些数据有些浪费，另外每次添加新的算法都去扩展上下文，容易形成复杂的上下文对象层次，也未见得有必要。
2.对于在策略算法的实现上添加自己需要的数据的方式。这样实现，比较简单，但是缺点也很明显，跟其他策略实现不一致，其他策略都是
从上下文中获取数据，而这个策略的实现一部分数据来自上下文，一部分数据来自自己，有些不统一。

两种方式各有优劣，至于如何选择，那就具体问题具体分析了。

容错恢复机制：当发生错误时，系统并不会崩溃，也不会出现错误就此不能继续向下运行了，而是有容忍出错的能力，而且还提供出现错误后
的备用方案，也就是恢复机制，来代替正常执行的功能，使程序继续向下运行。
public interface LogStrategy{
  //记录日志
  public void log(String msg);
}
//把日志记录到数据库中
public class DbLog implements LogStrategy{
   public void log(String msg){
      //制造错误
     if(msg!=null&&msg.trim().length>5){
         int a=5/0
     }
     System.out.println("现在把"+msg+"记录到数据库中");
   }
}
/把日志记录到文件中
public class FileLog implements LogStrategy{
   public void log(String msg){
      
     System.out.println("现在把"+msg+"记录到文件中");
   }
}
//日志记录的上下文
public class LogContext{
 public void operate(String msg){
  LogStrategy strategy=new LogStrategy();//优先选用策略，记录到数据库中
   try{
      strategy.log(msg);
   }catch(Exception err){
      strategy=new FileLog();//出错了就记录到文件中
      strategy.log(msg);
   }
 }
}
//客户端调用
public class Client{
  LogContext log=new LogContext();
  log.log("记录日志"); //将日志记录到数据库中
  log.log("再次记录日志");//超过5个字会出错，出错后就将日志记录到文件中
}

策略模式结合模板方法模式
当一系列算法的实现上存在公共功能，甚至这一系列算法的实现步骤都是一样的，只是在某些局部步骤上有所不同，比如上面记录日志的例子，
如果现在需要在所有的消息前面都添加上日志时间，也就是现在记录日志的步骤变成了，第一步为日志消息添加记录时间，第二步具体记录日志
这个时候，策略模式需要进行变化使用，有以下三种实现方式。
1.在上下文当中实现公共功能，让所有具体的策略算法回调这些方法，即将上下文当做参数传递给策略对象。
2.将策略的接口改成抽象类，然后在其中实现具体算法的公共功能，然后将变化的部分留给具体的子类去实现。
3.为所有的策略算法定义一个抽象的父类，让这个父类去实现策略的接口，然后在这个父类中去实现公共的功能。
也就是说当”一系列算法的实现步骤都是一样的，只是在某些局部步骤上有所不同“，那就可以在这个抽象类里面定义算法实现的骨架，
然后让具体的策略算法去实现变化的部分。这样的一个结构自然就变成了策略模式结合模板方法模式了。


策略模式的优点：
1.定义一系列算法
 策略模式的功能就是定义一系列算法，实现让这些算法可以相互替换。所有会为这一系列算法定义公共的接口，以约束一系列算法要实现的功能
 如果这一系列算法具有公共功能，可以把策略接口实现成为抽象类，把这些公共功能实现到父类中。
2.避免多重条件语句
策略模式的一系列算法是平等的，是可以互换的，写在一起就是通过if-else结构来组织，如果此时具体的算法实现中又有条件语句，就构成了
多重条件语句
  //演示多重条件语句
  public void method(int type){
   if(type==1){
       String s="";//示范数据 实际中可能为从某个地方获取的值
       if(s.length>5){
        
        }else{
        }
   }else if(type==2){
       int a=10; //示范数据 实际中可能为从某个地方获取的值
        if(a>0){
        
        }else{
        
        }
   }
  }
3.更好的扩展性
 只要增加新的策略实现类，然后使用策略的地方选择使用这个新的策略实现就可以了，不用改动策略接口和原有的实现

缺点：
1.客户必须了解每种策略的不同
2.增加了对象数目
3.只适合扁平的算法结构

策略模式的本质：分离算法，选择实现
策略接口封装和隔离了具体的策略算法，也能很容易地修改和添加算法，也能很容易地动态切换使用不同的算法。
引入上下文对象，使得客户端只需和上下文交互，而不用和具体的策略交互，上下文只是持有一个策略接口独象，使得切换
不同的策略算法变得很容易。而且上下文还可以提供一些策略算法需要的公共功能。

策略算法对设计原则的体现：开——闭原则，对扩展开放，对修改关闭。

何时选用策略模式？
1.出现许多相关的类，仅仅是行为有差别的情况下
2.出现同一个算法，有很多不同实现的情况下，可以使用策略模式把这些"不同的实现"实现成为一个算法的类层次
3.出现抽象一个定义了很多行为的类，并且是通过多个if-else语句来选择这些行为的情况下，可以使用策略模式来代替这些
条件语句。





















































