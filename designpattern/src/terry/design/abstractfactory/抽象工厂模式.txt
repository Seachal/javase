              
                        抽象工厂模式
类型：创建型
定义：提供一个创建一系列相关或相互依赖对象的接口，而无需指定它们具体的类。

场景问题：
组装电脑，我们需要选择自己需要的CPU和主板,然后告诉装机工程师自己的选择,接下来就等着装机工程师组装电脑了。对装机工程师
而言，只是知道CPU和主板的接口,而不知道具体实现(具体品牌,类型由客户指定)，很明显,可以用简单工厂或工厂方法模式。这里先
使用简单工厂来实现。这里只演示主板和cpu,由于实现是客户来定的，所以客户很容易选择了2个不兼容的CPU和主板一起工作，这样
就导致了问题。
简单工厂和工厂方法模式，不就可以解决只知道接口而不知道实现的问题吗？
  注意：简单工厂和工厂方法模式关注的是单个产品对象的创建,而抽象工厂要解决的问题是,要创建一系列的产品对象，而且这一系列
  对象是构建新的对象所需要的组成部分，也就是这一系列被创建的对象之间是有约束的。即形成一套方案，或一个产品族，用户一选
  就是选一套。
  
  抽象工厂的优点：
  1.分离接口和实现
客户端使用抽象工厂来创建需要的对象,而客户端根本就不知道具体的实现是谁,客户端只是面向对象的接口编程而已.
  2.使得切换产品簇变得容易
因为一个具体的工厂实现代表的是一个产品簇,客户端选用不同的工厂实现,就相当于是在切换不同的产品簇

抽象工厂模式的本质：
   选择产品簇的实现
简单工厂和工厂方法模式也是选择实现，不过它们都是单个产品的选择实现,而且工厂方法模式是将实现延迟到子类。而抽象工厂模式
是产品簇(它们都是产品的某一部分或者相互依赖)的选择实现。
   
抽象工厂通常为一个接口,里面定义了产生一系列相互依赖产品的抽象方法。   
   
   
   
   
   
   
   