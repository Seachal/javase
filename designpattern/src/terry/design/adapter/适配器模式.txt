                                  适配器模式
类型：结构型
定义：将一个类的接口转换成客户希望的另外一个接口,适配器模式使得原本由于接口不兼容而不能一起工作的那些类可以一起
         工作
 场景问题：假设一个日志管理模块从第一版(文件储存日志)升级为第二版(数据库储存)，现在要求第二版实现同时支持数据库
 存储和文件储存两种方式。
   由于两版的接口不兼容，但是功能都是实现了的,可以定义一个类来实现第二版的接口,然后在内部实现的时候,转调第一版已
   实现了的功能,这样就可以通过对象组合的方式,既复用了第一版已有的功能,同时又在接口上满足了第二版的调用。
    调用第二版接口,但内部实现是使用第一版的功能。
   标准实现：
   //目标接口或客户端调用接口
   public interface Target{
     void request();
   }
   //已经存在的接口
   public interface Adpatee{
     void specificRequest();
   }
   //适配器  实现目标接口
   public class Adpater implements Target{
      public Adaptee adaptee;//持有已接口
      public Adapter(Adaptee adaptee){
       this.adpatee=adaptee;
      }
      @override
      public void request(){
        this.adaptee.specificRequest();//转调第一版接口功能
      }
   }
   
 //客户端
   public class Client{
   
   public void fun(){
     Adaptee adaptee=new AdapteeImpl();//第一版接口实现类
     Target target=new Adapter(adaptee);//通过适配器对象创建第二版接口对象，
        target.request(); //调用第二版接口对象功能,内部实现转调第一版接口功能。这样实现了调用上使用第二版接口对象
                          //但具体实现是第一版的功能。
    }
  }
   
   
 适配器模式的实现：
 1.适配器的常见实现
   适配器通常是一个类,一般会让适配器类去实现Target接口,然后在适配器的具体实现里面调用Adaptee,也就是说适配器通常
   是一个Target类型，而不是Adaptee类型。  
 2.智能适配器
  在实际开发中,适配器也可以实现一些Adaptee没有实现,但是在Target中定义的功能，这种情况就需要在适配器的实现里面,
  加入新功能的实现,这种适配器就被称为智能适配器。一般新加入的功能的实现会用到很多Adaptee的功能，相当于利用Adaptee
  的功能来实现更高层的功能。
  3.适配多个Adaptee
  适配器在适配的时候，可以适配多个Adaptee,也就是说实现某个新的Target的功能的时候,需要调用多个模块的功能，适配多个
  模块的功能才能满足新接口需求。
  4.适配器Adapter实现的复杂程度
  适配器的实现复杂程度取决于Target和Adaptee的相似程度。
  如果相似程度很高,比如只有方法名称不一样，那么Adapter只需要简单地转调一下接口就可以了。
  如果相似程度低，比如两边接口的方法所定义的功能完全不一样,在Target中定义的一个方法，可能在Adaptee中定义了三个更小
  的方法，那么这个时候在实现Adapter的时候，就需要组合调用了。
  5.缺省适配
  为一个接口提供缺省实现,即用一个类去实现接口,有了它,就不用直接去实现接口,而是采用继承这个缺省适配器对象,从而让子类
  可以有选择地去覆盖实现需要的方法，
 
 双向适配器:
    即同时实现了接口Target,又实现了接口Adaptee，
    Target implA=new TargetImpl();//第二版接口实现类
    Adaptee implB=new AdapteeImpl();//第一版接口实现类
    
    //1.将第一版接口适配成第二版接口
    Target target=new TwoDirectionAdaptee(implA,implB);
         target.request();//调用第二版接口功能其实内部实现转调的是第一版Adaptee接口的功能。
    //2.将第二版接口适配成第一版即可
    Adaptee adaptee=new TwoDirectionAdaptee(implA,implB);
         adaptee.spceficRequest();//调用第一版接口功能其实内部实现转调的是第二版Target接口的功能。
   
 类适配器：
   比如定义一个类继承第一版接口实现类,这样就有了第一版接口的功能，然后实现第二版接口,这样外部调用即可以使用第一版
   的功能，又可以调用第二版接口实现第一版的功能(在接口实现中转调第一版对象的功能)。
  
 适配器模式的优点：
 1.更好的复用性
   如果功能是已经有了的,只是接口不兼容,那么通过适配器模式就可以让这些功能得到更好的复用。
  比如想通过调用第二版接口对象却能实现第一版已有的功能。
 2.更好的扩展性
 在实现适配器功能的时候,可以调用自己开发的功能，从而自然地扩展系统的功能。
  
适配器模式的本质：
  转换匹配,复用功能
 适配器通过转换调用已有的实现,从而能把已有的实现匹配成需要的接口(新接口)，使之能满足客户端的需要，转换匹配是手段,
 而复用已有的功能才是目的。在进行转换匹配的过程中,适配器还可以在转换调用的前后实现一些功能处理,也就是实现智能
 的适配。
 
 何时使用适配器模式？
 1.如果想使用一个已经存在的类,但是它的接口不符合你的要求,这种情况就可以使用适配器模式，来把已有的实现转换成你需要
    的接口
 
 重点是使用新接口却复用已有功能，当然在适配中也可以加入一些自己想要的功能，即智能的适配器
 
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   