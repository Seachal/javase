          
                      迭代器模式
类型：行为型
定义：提供一种方法顺序访问一个聚合对象中的各个元素，而又不需要暴露该对象的内部表示。
     所谓聚合，是指一组对象的组合结构，比如java中的集合，数组等。
场景问题：整合工资表数据
  项目的客户方收购了一家小公司，这家小公司有自己的工资系统，现在需要整合到客户已有的工资系统中。客户已有的工资系统，内部是采用List来记录
  工资列表，而新收购的这家公司的工资系统，在内部是采用数组来记录工资列表，但是幸运的是，两个系统用来描述工资的数据模型是差不多的。
 要整合这两个工资系统的数据，当然最简单的方式是直接把新收购的这家公司的工资系统也改成内部使用List来记录工资列表，但是经过仔细查看
 源代码，发现有很多的代码跟这个数组有关，还有很多是比较重要的逻辑处理，比如计算工资等。
 现在除了要把两个工资系统整合起来外，老版还希望能够通过决策辅助系统来统一查看工资数据，他不想看到两份不同的工资表。那么应该如何实现呢？
    老板希望能够以一个统一的方式来查看所有的工资数据，也就是说从外部看来，两个系统输出的工资表应该是一样的。
   问题的核心在于：如何能够以一个统一的方式来访问内部实现不同的聚合对象。
   
  分析：要以一个统一的方式来访问内部实现不同的聚合对象，那么首先需要把这个统一的访问方式定义出来，按照这个统一的方式定义出来的接口，在
  迭代器模式中对应的就是Iterator接口。
  迭代器迭代的是具体的聚合对象，那么不同的聚合对象就应该有不同的迭代器，为了让迭代器以一个统一的方式来操作聚合对象，因此给所有的聚合对象
  抽象出一个公共的父类，让它提供操作聚合对象的公共接口，这个抽象的公共父类在迭代器模式中对应的就是Aggregate对象。
  
Iterator：迭代器接口，定义访问和遍历元素的接口。
ConcreteIterator：具体的迭代器实现对象，实现对聚合对象的遍历，并跟踪遍历时的当前位置。
Aggregate：聚合对象，定义创建相应迭代器对象的接口
ConcreteAggreate：具体聚合对象，实现创建相应的迭代器对象
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   
   