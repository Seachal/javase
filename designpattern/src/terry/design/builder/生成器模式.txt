
                                                                  生成器模式
类型：创建型
定义:将一个复杂对象的构建与它的表示分离,使得同样的构建过程可以创建不同的表示
场景问题：
 导出数据,可能有文本格式,xml格式,Excel格式。要求不管什么格式,都分成3个部分,分别是文件头,文件体和文件尾
 分析：不管导出为什么格式,在实现的时候，步骤基本上都是一样的,大致分成以下几步：
  1.先拼接文件头的内容
  2.然后拼接文件体的内容
  3.再拼接文件尾的内容
  4.最后把拼接的内容输出去成为文件
  也就是说,对于不同的输出格式,处理步骤是一样的,但是每步的具体实现是不一样。构建每种格式的数据文件的处理过程
  就是构建过程。要实现同样的构建过程可以创建不同的表现,那么就应该先把构建过程独立出来,在生成器模式中把它
  成为指导者，由它来指导装配过程，但是不负责每步具体的实现。具体实现每步的对象，在生成器模式中称为生成器
  
 构成：
 Builder：生成器接口,定义创建一个Product对象所需的各个部件的操作
 ConcreteBuilder：具体的生成器实现,实现各个部件的创建，并负责组装Product对象的各个部件，同时还提供一个
 让用户获取组装完成后的产品对象的方法。
 Director：指导者,主要用来使用Builder接口,以一个统一的过程来构建所需要的Product对象。
 Product：产品,表示被生成器构建的复杂对象,包含多个部件
 
 //生成器接口  描述Product对象各个部件的操作
 public interface Builder{
  public void buildHead();//构建文件头
  public void buildBody();//构建文件体
  public void buildTail();//构建文件尾
 } 
 //txt格式生成器
 public class TxtBuilder implements Buidler{
    @override
    public void buildHeader(){
    System.out.println("构建txt文件头");
    }
     @override
    public void buildBody(){
    System.out.println("构建txt文件体");
    }
     @override
    public void buildTail(){
    System.out.buildTail("构建txt文件尾");
    }
    
    //获取构建后的Product的方法
    public String getResult(){
    
    }
 }
 //xml生成器
 public class XmlBuilder implements Buidler{
    @override
    public void buildHeader(){
    System.out.println("构建xml文件头");
    }
     @override
    public void buildBody(){
    System.out.println("构建xml文件体");
    }
     @override
    public void buildTail(){
    System.out.buildTail("构建xml文件尾");
    }
   //获取构建后的Product的方法
    public String getResult(){
    
    }
 }
 
  //指导者     作用：指导生成器构建对象
  public class Director{
    public Builder builder;//持有生成器接口对象
    public Director(Builder builder){
      this.builder=builder;
    }
    //封装构建过程，以一个统一的过程来构建所所需要的Product
   public void construct(){
      builder.buildHeader();//构建文件头
      builder.buildBody();//构建文件体
      builder.buildTail();//构建文件尾
      
   }
  }
  
 //客户端
 public class Client{
  public void method(){
       Builder builder=new TxtBuidler();//创建生成器
       Director director=new Director(builder);//指导者 指导生成器构建对象
       director.construct();//统一的构建过程
      String product= builder.getResult();//生成器取得Product
  }
 }
总结：对同一个构建过程,只要配置不同的生成器实现,就会生成不同表现的对象。

认识生成器模式：
生成器模式的重心在于分离构建算法和具体的构造实现，从而使得构建算法可以重用。这个构建的过程是统一的,固定不变的，变化的部分放到生成
器部分了，只要配置不同的生成器,那么同样的构建过程,就能构建出不同的产品来。

生成器模式的优点：
 1.松散耦合
 生成器模式可以用同一个构建算法构建出表现上完全不同的产品,实现产品构建和产品表现上的分离,生成器模式正是把产品构建的过程独立出来,
 使它和具体产品的表现松散耦合,从而使得构建算法可以复用。
 2.可以很容易地改变产品的内部表示
由于Builder对象只是提供接口给Director使用,那么具体的部件创建和装配方式是被Builder接口隐藏了的,Director并不知道这些具体的实现细节,
这样一来,要想改变产品的内部表示,只需要切换Builder的具体实现即可,不用管Director。
 3.更好的复用性
构建算法和具体产品的实现是分离的  所以都可以得到复用,同一个产品的实现,可以配合不同的构建算法使用。比如上面的例子,可以先构建文件体,然后
在文件体前构建文件头,最后在文件体后面构建文件尾。(即同一产品使用不同的算法)

生成器模式的本质：
 分离整体构建算法和部件构造
 
 何时使用生成器模式?
1.如果同一构建过程有着不同的表示时。
2.构建算法和产品表现松耦合。

  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  