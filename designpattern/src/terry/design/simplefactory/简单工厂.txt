                        
                         简单工厂
类型：创建型    即负责创建对象
定义：提供一个创建对象实例的功能，而无须关心其具体实现,被创建实例的类型可以是接口,抽象类,也可以是具体的类。

接口的思想：封装隔离
     封装是指“对被隔离体的行为的封装”或"对被隔离体的职责的封装"，也就是该类的功能的封装,
     隔离：是指外部调用和内部实现的隔离,外部调用是不知道内部具体实现的，也就是外部调用和内部实现被接口隔离开的
     
 使用接口的好处:
    由于外部调用和内部实现隔离开了,只要接口不变,内部实现的变化就不会影响到外部应用(面向接口编程,和具体实现无关)。
    
 面向接口编程：
    在java程序设计里面,非常讲究层的划分和模块的划分,通常按照三层来划分,分别是表现层,逻辑层,数据层.它们之间都要通
    过接口来通信。每一个层里面有可以分很多模块,每个模块对外应该提供接口，其他地方就可以通过该接口来使用该模块的功能
    
 简单模式详解：
   1.不使用模式的解决方案
     public class Client{
       public void invoke(){
       
        Api api=new ApiImple();
           api.xxx();
       }
     }
     缺点：客户端不但知道了接口,还知道了具体的实现类是ApiImple,接口的思想是"封装隔离",而实现类ApiImple应该是被接口
       Api封装同客户端隔离开的,也就是说,客户端根本不知道具体的实现类是ApiImple.
       
   2.实现简单工厂来解决
         客户端可以通过Factory来获取需要的接口对象,然后调用接口的方法来实现需要的功能,而且客户端也不需要关心具体的
          实现了(具体的实现类)。
        简单工厂方法的内部主要实现功能是"选择合适的实现类"来创建实例对象,既然要实现选择,那么就需要选择的条件或者
        选择的参数,来源有几下几种:
         1) 来源于客户端,由Client来传入参数
         2）来源于配置文件,从配置文件获取用于判断的值
         3）来源于程序运行期的某个值,比如从缓存中获取某个运行期的值
      
      缺点：如果增加一个接口的实现类,就要在工厂方法中增加一个判断来创建实现类.如果希望增加了实现类过后不修改工厂类，
      一个解决办法就是使用配置文件,当有了新的实现类后,只要在配置文件里面配置上新的实现类即可。在简单工厂方法里面通
      过反射创建对象。
     优点：简单工厂的目的在于为客户端来选择相应的实现,从而使得客户端和实现之间解耦,具体实现发生了变化,比如增加一个新
             的实现类,就不用变动客户端了。
      
 思考简单工厂
     本质：选择实现   实现类是写好的,只是根据不同条件来创建不同的实现类
     适用场景：
       1.如果想要完全封装隔离 具体实现,让外部只能通过接口来操作封装体(面向接口编程)。
       2.如果想要把对外创建对象的职责集中管理和控制,一个简单工厂可以创建很多的,不相关的对象。可以把对外创建对象的职责
              集中到一个简单工厂来。
               
注意：一般情况下,工厂类并不需要维护自己的状态,也不需要创建很多对象,实现为单例即可。关于工厂类的命名：功能+Factory    
     
     
     
     
     
     
     
     
     
     
     
     
     
     
     