                  
                                     模板方法模式
类型：行为型
定义：定义一个操作中的算法的骨架，而将一些步骤延迟到子类中，模板方法使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤
标准实现：
//定义模板方法，
public abstract class Template{
     //公共方法
     public void operate(){
       //公共方法具体实现
     }
      //模板方法  定义算法骨架
     public void templateMethod(){
        method1();
        method2();
     }
    public abstract void method1();//原语操作，也就是变化的部分
    public abstract void method2();
}
//具体实现类
public class ConcreteTemplate extends Template{
    public void method1(){
     System.out.println("具体的实现");
    }
    public void method2(){
    System.out.println("具体的实现");
    }
}

认识模板方法模式：
1.模板方法的功能
   模板方法模式的功能在于固定算法骨架,而让具体算法实现可扩展。这个实际应用中非常广泛，尤其是在设计框架功能的时候非常有用。框架定义
   好了算法的步骤，在合适的点让开发人员进行扩展，实现具体的算法。比如在Dao实现中设计通用的增删改查功能。子类实现父类的抽象方法后也可以
   非常容易地进行扩展新的功能。
2.为何不是接口
 java提倡“面向接口编程”，尽量使用接口，但是当“既要约束子类的行为，又要为子类提供公共功能”的时候，就要使用抽象类。接口只能约束子类行为
 ，不能为子类提供公共功能。
3.变与不变
 程序设计的一个很重要的思考点就是"变与不变"，也就是分析程序中哪些功能是可变的，哪些功能是不变的，然后把不变的部分抽象出来，进行公共的实现
 把变化的部分分离处理，用接口封装隔离，或者是用抽象类来约束子类的行为。
4.好莱坞法则——不要找我们，我们会联系你
模板方法很好的体现了这一点，作为父类的模板会在需要的时候，调用子类相应的方法，也就是由父类来找子类，而不是让子类来找父类
按照通常的思路，是子类找父类才对，也就是应该是子类来调用父类的方法，因为父类根本就不知道子类，而子类是知道父类的，但是在
模板方法里面，是父类来找子类，所以是一种反向的控制结构。

模板方法模式与JAVA回调：
模板方法模式的一个目的，就在于让其他类来扩展或具体实现在模板中固定的算法骨架中的某些算法步骤。
其实在Java开发中，还可以通过Java回调技术，通过回调在接口中定义的方法，调用到具体的实现类中的方法，在这种实现中，可以不把实现类写成
单独的类，而是使用匿名内部类来实现回调方法。

/**
 * 定义控制模板方法需要的回调接口，需要把要所有需要的接口方法都定义出来，或者说是把所有可以被扩展的方法都定义出来
 */
interface CallBack{
	 void success();
	 void fail();
}
/**
 * 这时候的模板类不再是抽象类了，对于模板方法，需要传入一个回调接口对象
 */
class Template {
	//模板方法      传入回调接口对象
	public void login(String username,CallBack callBack){
		if(null!=username&&username.trim().length()>5){
			callBack.success();
		}else{
			callBack.fail();
		}
	}
}
class Client{
	public void operate(){
	Template template=new Template();
	template.login("terry_zhang", new CallBack() {
		@Override
		public void success() {
			System.out.println("用户名合法");
		}
		@Override
		public void fail() {
			System.out.println("用户名不合法");
		}
	});
	}
}

关于模板方法模式的两种实现方式：
1.使用继承的方式，抽象方法和具体实现的关系是在编译期间静态决定的，是类级的关系，使用java回调，这个关系是在运行期间动态决定的
是对象级的关系。
2.相对而言，使用回调机制会更灵活，因为java是单继承的，如果使用继承的方式，对于子类而言，今后就不能继承其他对象了，而使用回调
是基于接口的。
3.如果使用回调接口，回调的接口把所有可能被扩展的方法都定义进去，这就导致实现的时候，不管你要不要扩展，都要实现这个方法。

事实上，前面讲命令模式的时候可通过退化命令模式来实现java回调的功能，命令模式可以作为模板方法模式的一种替代品，那就是因为可以使用
java回调方式来实现模板方法模式。

关于模板方法模式，java中还有一个非常典型的运用，那就是java.util.Collections类中有一个静态的排序方法sort
		List<Integer> numberList=new ArrayList<>();
		Collections.sort(numberList, new Comparator<Integer>() {

			@Override
			public int compare(Integer o1, Integer o2) {
				 if(o1>o2)return 1;
				 else if(o1<o2)return -1;
				 else return 0;
			}
		});

模板方法模式的本质：固定算法骨架
模板方法模式主要是通过制定模板，把算法步骤固定下来，至于谁来实现，模板可以自己提供实现，也可以由子类去实现，还可以通过回调机制让
其他类来实现。

何时选用模板方法模式？
1.需要固定算法骨架，实现一个算法的不变的部分，并把可变的行为留给子类来实现的情况
2.各个子类中具有公共行为，应该抽象出来，集中在一个公共类中去实现，从而避免代码重复。
3.需要控制子类扩展的情况，模板方法模式会在特定的点来调用子类的方法，这样只允许在这些点进行扩展。











































































